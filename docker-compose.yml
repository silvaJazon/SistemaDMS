# Documentação: docker-compose.yml para o Projeto FluxoAI (Arquitetura Microsserviços Completa)

services:
  # Serviço Mosquitto MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: fluxoai-mosquitto
    ports:
      - "1883:1883" # Expõe a porta MQTT para a rede do host
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    restart: unless-stopped
    networks:
      - fluxoai_net

  # Serviço de Captura de Vídeo
  servico_captura:
    build: ./servico_captura
    image: jazonbatista/fluxoai-servico-captura:latest
    container_name: fluxoai-servico_captura
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - VIDEO_SOURCE=${VIDEO_SOURCE:-0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - FRAME_WIDTH=${FRAME_WIDTH:-640}
      - FRAME_HEIGHT=${FRAME_HEIGHT:-480}
      - PUBLISH_TOPIC=fluxoai/frames/raw
    depends_on:
      - mosquitto
    devices:
      - "/dev/video0:/dev/video0" # Acesso à câmara USB
    restart: unless-stopped
    networks:
      - fluxoai_net

  # Serviço de Inteligência Artificial
  servico_ia:
    build: ./servico_ia
    image: jazonbatista/fluxoai-servico-ia:latest
    container_name: fluxoai-servico_ia
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - SUBSCRIBE_TOPIC=fluxoai/frames/raw
      - PUBLISH_TOPIC_DATA=fluxoai/detections
      - PUBLISH_TOPIC_IMG=fluxoai/frames/detected # Opcional: Publica imagem com caixas IA
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DETECTION_THRESHOLD=${DETECTION_THRESHOLD:-0.55}
    depends_on:
      - mosquitto
    restart: unless-stopped
    networks:
      - fluxoai_net

  # Serviço de Análise de Comportamento
  servico_analise:
    build: ./servico_analise
    image: jazonbatista/fluxoai-servico-analise:latest
    container_name: fluxoai-servico_analise
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - SUBSCRIBE_TOPIC_DATA=fluxoai/detections
      - SUBSCRIBE_TOPIC_RAW_IMG=fluxoai/frames/raw
      - PUBLISH_TOPIC_ANALYZED_IMG=fluxoai/frames/analyzed # Publica imagem final
      # - PUBLISH_TOPIC_STATUS=fluxoai/status/loitering # Futuro
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOITERING_THRESHOLD_SECONDS=${LOITERING_THRESHOLD_SECONDS:-10}
      - LOITERING_MAX_DISTANCE=${LOITERING_MAX_DISTANCE:-30}
      - JPEG_QUALITY=${JPEG_QUALITY:-50}
    depends_on:
      - mosquitto
    restart: unless-stopped
    networks:
      - fluxoai_net

  # Serviço Web (Frontend)
  servico_web:
    build: ./servico_web # Pasta do novo serviço web
    image: jazonbatista/fluxoai-servico-web:latest # Nova imagem
    container_name: fluxoai-servico_web
    ports:
      - "5000:5000" # Expõe a porta 5000 do container para a porta 5000 do host
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - SUBSCRIBE_TOPIC_ANALYZED=fluxoai/frames/analyzed # Ouve os frames finais
      - FLASK_PORT=5000 # Porta interna do Flask
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - FRAME_WIDTH=${FRAME_WIDTH:-640}   # Usado para placeholder
      - FRAME_HEIGHT=${FRAME_HEIGHT:-480} # Usado para placeholder
    depends_on:
      - mosquitto
      - servico_analise # Garante que a análise inicie antes da web
    restart: unless-stopped
    networks:
      - fluxoai_net

networks:
  fluxoai_net:
    driver: bridge

