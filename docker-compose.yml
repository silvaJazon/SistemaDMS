# Documentação: Ficheiro de orquestração para o Docker Compose do projeto FluxoAI.
# Define os serviços que compõem a aplicação e como eles se conectam.
# NOTA: O atributo 'version' é obsoleto e foi removido.

services:
  # --- Serviço de Inteligência Artificial ---
  servico_ia:
    # Nome da imagem a ser usada para este serviço.
    # Usamos a tag 'latest' que construímos localmente.
    image: jazonbatista/fluxoai-servico-ia:latest

    # Nome do contentor (opcional, mas útil para identificação).
    container_name: fluxoai-servico_ia-1

    # Política de reinício: Tenta reiniciar o contentor automaticamente se ele falhar.
    restart: unless-stopped

    # Variáveis de ambiente passadas para o contentor.
    environment:
      # O nosso script main.py vai ler esta variável para saber qual câmara usar.
      # O valor "0" refere-se à primeira câmara USB/local.
      # Para usar um DVR: "rtsp://user:pass@ip:port/path"
      - VIDEO_SOURCE=0
      # Adiciona a variável LOG_LEVEL, que será definida pelo Makefile ou terá INFO como padrão.
      # O script main.py usará esta variável para configurar o nível de logging.
      - LOG_LEVEL=${LOG_LEVEL:-INFO} # Usa o valor de LOG_LEVEL do ambiente, ou 'INFO' se não definido

    # Mapeamento de portas: Liga a porta 5000 do Raspberry Pi à porta 5000 do contentor.
    # Isto permite aceder ao servidor web Flask a partir da rede local.
    ports:
      - "5000:5000"

    # Mapeamento de dispositivos: Dá ao contentor acesso ao dispositivo da câmara USB.
    # '/dev/video0' é o caminho padrão para a primeira câmara no Linux (Raspberry Pi OS).
    # Se a sua câmara aparecer como /dev/video1, altere aqui.
    devices:
      - "/dev/video0:/dev/video0"

# (Opcional) Define uma rede personalizada para os serviços comunicarem entre si.
# Útil quando adicionarmos mais serviços no futuro.
# networks:
#   fluxoai_net:
#     driver: bridge

# Nota: Se descomentar a secção 'networks', precisa de adicionar 'networks: - fluxoai_net'
# dentro da definição do serviço 'servico_ia'.

