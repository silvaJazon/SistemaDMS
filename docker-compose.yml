# Documentação: docker-compose.yml para o Projeto FluxoAI (Arquitetura Microsserviços)

services:
  # Serviço Mosquitto MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: fluxoai-mosquitto
    ports:
      - "1883:1883"
    volumes:
      # Monta a configuração personalizada para permitir conexões de outros containers
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    restart: unless-stopped
    networks:
      - fluxoai_net

  # Serviço de Captura de Vídeo
  servico_captura:
    build: ./servico_captura # Pasta do serviço de captura
    image: jazonbatista/fluxoai-servico-captura:latest # Nome da imagem a ser construída/usada
    container_name: fluxoai-servico_captura
    environment:
      # Configurações passadas para o script main.py do servico_captura
      - MQTT_BROKER_HOST=mosquitto # Nome do serviço do broker na rede Docker
      - MQTT_BROKER_PORT=1883
      - VIDEO_SOURCE=${VIDEO_SOURCE:-0} # Fonte do vídeo (padrão: câmara 0, pode ser sobreposto)
      - LOG_LEVEL=${LOG_LEVEL:-INFO}   # Nível de log (padrão: INFO, pode ser sobreposto pelo Makefile)
      - FRAME_WIDTH=${FRAME_WIDTH:-640} # Largura desejada para os frames publicados
      - FRAME_HEIGHT=${FRAME_HEIGHT:-480} # Altura desejada para os frames publicados
      - PUBLISH_TOPIC=fluxoai/frames/raw # Tópico onde os frames crus serão publicados
    depends_on:
      - mosquitto # Garante que o mosquitto inicie antes deste serviço
    devices:
      - "/dev/video0:/dev/video0" # Mapeia a câmara USB do host para dentro do container
    restart: unless-stopped
    networks:
      - fluxoai_net # Conecta este serviço à rede interna

  # Serviço de Inteligência Artificial
  servico_ia:
    build: ./servico_ia # Pasta do serviço de IA
    image: jazonbatista/fluxoai-servico-ia:latest # Nome da imagem a ser construída/usada
    container_name: fluxoai-servico_ia
    environment:
      # Configurações passadas para o script main.py do servico_ia
      - MQTT_BROKER_HOST=mosquitto # Nome do serviço do broker
      - MQTT_BROKER_PORT=1883
      - SUBSCRIBE_TOPIC=fluxoai/frames/raw # Tópico que este serviço vai ouvir
      - PUBLISH_TOPIC_DATA=fluxoai/detections # Tópico para publicar dados JSON das deteções
      - PUBLISH_TOPIC_IMG=fluxoai/frames/detected # Tópico para publicar imagem JPEG com caixas
      - LOG_LEVEL=${LOG_LEVEL:-INFO} # Nível de log
      - DETECTION_THRESHOLD=${DETECTION_THRESHOLD:-0.55} # Limite de confiança da IA
    depends_on:
      - mosquitto # Garante que o mosquitto inicie antes
    restart: unless-stopped
    networks:
      - fluxoai_net # Conecta este serviço à rede interna
    # NOTA: Este serviço não precisa mais de acesso direto à câmara (`devices`)
    # nem de expor portas (`ports`), pois comunica apenas via MQTT.

  # Serviço de Análise de Comportamento (Modificado)
  servico_analise:
    build: ./servico_analise # Pasta do novo serviço
    image: jazonbatista/fluxoai-servico-analise:latest # Novo nome de imagem
    container_name: fluxoai-servico_analise
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - SUBSCRIBE_TOPIC_DATA=fluxoai/detections # Ouve os dados das deteções
      - SUBSCRIBE_TOPIC_RAW_IMG=fluxoai/frames/raw # Ouve os frames crus
      # - PUBLISH_TOPIC_STATUS=fluxoai/status/loitering # Onde publicar o status (futuro)
      - PUBLISH_TOPIC_ANALYZED_IMG=fluxoai/frames/analyzed # Onde publicar imagem final
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOITERING_THRESHOLD_SECONDS=${LOITERING_THRESHOLD_SECONDS:-10}
      - LOITERING_MAX_DISTANCE=${LOITERING_MAX_DISTANCE:-30}
      - JPEG_QUALITY=${JPEG_QUALITY:-50} # Qualidade para publicar imagem final
    depends_on:
      - mosquitto # Depende do broker
    restart: unless-stopped
    networks:
      - fluxoai_net # Conecta à mesma rede

  # --- Serviços Futuros (Placeholders) ---
  # servico_web: ...

# Define a rede interna que todos os serviços usarão para comunicar
networks:
  fluxoai_net:
    driver: bridge # Tipo de rede padrão do Docker

